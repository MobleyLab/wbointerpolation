"""
Script to compute the wbo calculations for molecules created by doublering_filter.py. The script
iterates through every file in the openff_results directory, creating two new .pkl files for
each group of molecules. For each group, molecules along with their wbo values are placed into the
openff_wbo_calcs directory and failures are tracked in the openff_wbo_fails directory.

Usage:
    wbo_calc.py
"""
from openeye import oechem, oeomega, oequacpac

import argparse
import os
import pickle

def calc():
    #parser = argparse.ArgumentParser()
    #parser.add_argument("--dir",
    #                    type=str,
    #                    required=True,
    #                    help=("Name of a directory containing .pkl files generated by doublering_filter.py."))
    #args = parser.parse_args()
    
    g2_count = 0
    group_num = 0
    SUBS = oechem.OESubSearch("[#6X3H1:1]~[#6X3:2](~[#6X3H1])-[#6X3:3](~[#6X3H1])~[#6X3H1:4]")
    AM1_CALCULATOR = oequacpac.OEAM1()

    #for subdir, dirs, files in os.walk(args.dir):
    #    for file in files:
    #        if ".pkl" in file:
    wbos_dict = {}
    failed_mols = {}

    with open(f"oe_results/mols_group0.pkl", "rb") as file:
        smiles_dict = pickle.load(file)

    count = 0

    for smiles, oe_molecule in smiles_dict.items():
        count += 1
        print(count)
        try:
            subs_matches = SUBS.Match(oe_molecule, True)
            wbos = []
            
            g2_temp_count = 0
            for match in subs_matches:
                g2_temp_count += 1
                results = oequacpac.OEAM1Results()
                target_bond = match.GetTargetBonds().Target() # for single: match.Target().GetTargetBonds().Target()
                target_idxs = (target_bond.GetBgn().GetIdx(), target_bond.GetEnd().GetIdx())
                
                AM1_CALCULATOR.CalcAM1(results, oe_molecule)
                wbos.append(results.GetBondOrder(target_idxs[0], target_idxs[1]))
            
            if g2_temp_count > 1:
                g2_count += 1
            wbos_dict[smiles] = wbos
        
        except KeyboardInterrupt:
            break
        
        except Exception as e:
            failed_mols[smiles] = e
            continue
    
    with open(f"oe_wbo_calcs/wbo_calc_group{group_num}.pkl", "wb") as file:
        pickle.dump(wbos_dict, file)
        
    with open(f"oe_wbo_fails/wbo_fails_group{group_num}.pkl", "wb") as file:
        pickle.dump(failed_mols, file)
    
    group_num += 1
    print(g2_count)
    
if __name__ == "__main__":
    calc()
