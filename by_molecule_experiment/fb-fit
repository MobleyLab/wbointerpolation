{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#imports\n",
    "#Created by Jessica\n",
    "\n",
    "import os\n",
    "import json\n",
    "import tempfile\n",
    "from openforcefield.topology import Molecule, Topology\n",
    "from openforcefield.typing.engines.smirnoff import (ForceField,\n",
    "UnassignedValenceParameterException, BondHandler, AngleHandler,\n",
    "ProperTorsionHandler, ImproperTorsionHandler,\n",
    "vdWHandler)\n",
    "from plot_td_energies import collect_td_targets_data, plot_td_targets_data\n",
    "import pickle\n",
    "from make_torsion_target_new import *\n",
    "import shutil\n",
    "\n",
    "force_balance_file = 'optimize.in'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#functions\n",
    "#sub_dir = [x[0] for x in os.walk(directory) if os.path.basename(x[0]).startswith('td')]\n",
    "\n",
    "def makePlots(ds, ff, param_fit, ff_analysis, param_analysis, target_directory):\n",
    "    \"\"\"\n",
    "    Description: \n",
    "    -Create k versus WBO plots\n",
    "    -Create MM versus QM plots for each target \n",
    "    \n",
    "    \n",
    "    input:\n",
    "    ds: List of dataset names\n",
    "    ff: .offxml style format force field name\n",
    "    param: List of parameters to generate plots for\n",
    "    \"\"\"\n",
    "    \n",
    "    #clear out target directory to create new targets based on dataset specifications \n",
    "    shutil.rmtree(target_directory)\n",
    "    os.mkdir(target_directory)\n",
    "    \n",
    "    \n",
    "    #make td Targets \n",
    "    for d in ds: \n",
    "        torsiondrive_data=download_torsiondrive_data(d)\n",
    "        make_torsiondrive_target(d, torsiondrive_data, test_ff=None)\n",
    "        \n",
    "        \n",
    "\n",
    "    #Create targets folder in subdirectory \n",
    "    force_balance_file = 'optimize.in'\n",
    "\n",
    "\n",
    "    # Find which line of optimize.in the targets specificaiton begins at\n",
    "    with open(force_balance_file, 'r') as f:\n",
    "        replace_index = None\n",
    "        force_balance_lines = f.readlines()\n",
    "        for index,line in enumerate(force_balance_lines):\n",
    "            try:\n",
    "                #if 'name' in line[:4]:\n",
    "                if line.startswith('name'):\n",
    "                    replace_index = index\n",
    "                    break\n",
    "            except:\n",
    "                pass\n",
    "        #print(replace_index)\n",
    "\n",
    "    count = 0\n",
    "    \n",
    "    \n",
    "\n",
    "    \n",
    "    #run force balance \n",
    "    #store the k1 and k2 values\n",
    "    #getKval(k1, k2)=kval\n",
    "    \n",
    "    #store data in dictionary data {cmiles : [wbo, kval], }\n",
    "    \n",
    "    #create figure \n",
    "    \n",
    "    return \n",
    "    \n",
    "def getKval(k1, k2):\n",
    "    \"\"\"\n",
    "    Determine the slope from the k1 and k2 value\n",
    "    \n",
    "    k1: \n",
    "    k2:\n",
    "    \"\"\"\n",
    "    \n",
    "    \n",
    "    \n",
    "\n",
    "    return kval \n",
    "\n",
    "\n",
    "def make_wbo_versus_k_plots(valDict):\n",
    "    \"\"\"\n",
    "    Description: Make plots of k versus WBO and save plots to .pdf \n",
    "    \n",
    "    \n",
    "    input: \n",
    "    valDict: Dictionary of cmiles as keys and list of [wbo, kval] as the items \n",
    "    \n",
    "    \"\"\"\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    return \n",
    "\n",
    "\n",
    "\n",
    "def make_MM_QM_plots(datasets):\n",
    "    \"\"\"\n",
    "    datasets: MM_QM_Plots\n",
    "    \n",
    "    \"\"\"\n",
    "\n",
    "    \n",
    "    \n",
    "    \n",
    "    return \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "    \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading TorsionDrive Scans from [ SMIRNOFF Coverage Torsion Set 1 ] spec [default]\n",
      "Found 585 data entries\n",
      "Found 585 torsiondrive records\n",
      "    1 : [CH3:1][O:2][CH:3]([OH:4])OC                       status COMPLETE\n",
      "    2 : [CH3:1][O:2][CH:3](O)[O:4]C                        status COMPLETE\n",
      "    3 : CO[CH:3]([OH:4])[O:2][CH3:1]                       status COMPLETE\n",
      "    4 : C[O:4][CH:3](O)[O:2][CH3:1]                        status COMPLETE\n",
      "    5 : [H:4][C:3](O)([O:2][CH3:1])OC                      status COMPLETE\n",
      "    6 : [H:4][C:3](O)(OC)[O:2][CH3:1]                      status COMPLETE\n",
      "    7 : [H:4][CH2:3][O:2][CH:1](O)OC                       status COMPLETE\n",
      "    8 : [H:4][O:3][CH:2]([O:1]C)OC                         status COMPLETE\n",
      "    9 : [H:4][O:3][CH:2](OC)[O:1]C                         status COMPLETE\n",
      "   10 : [H:1][C:2]([O:3][H:4])(OC)OC                       status COMPLETE\n",
      "   11 : [H:3][CH2:1][S:2][H:4]                             status COMPLETE\n",
      "   12 : [H:1][CH2:3][S:2][H:4]                             status COMPLETE\n",
      "   13 : [H:3][CH2:1][O:2][H:4]                             status COMPLETE\n",
      "   14 : [H:1][CH2:3][O:2][H:4]                             status COMPLETE\n",
      "   15 : [H:4][O:3][CH2:2][CH3:1]                           status COMPLETE\n",
      "   16 : [H:4][CH2:3][CH2:2][OH:1]                          status COMPLETE\n",
      "   17 : [H:3][CH2:1][CH:2]([H:4])O                         status COMPLETE\n",
      "   18 : [H:1][CH2:3][CH:2]([H:4])O                         status COMPLETE\n",
      "   19 : [CH:1]#[C:2][c:3]1[cH:4]cccc1                      status ERROR\n",
      "   20 : [CH:1]#[C:2][c:3]1cccc[cH:4]1                      status ERROR\n",
      "   21 : C#[C:1][c:2]1[cH:3][cH:4]ccc1                      status COMPLETE\n",
      "   22 : [H:4][c:3]1cccc[c:2]1[C:1]#C                       status COMPLETE\n",
      "   23 : C#[C:1][c:2]1ccc[cH:4][cH:3]1                      status COMPLETE\n",
      "   24 : C#C[c:4]1[cH:3][cH:2][cH:1]cc1                     status COMPLETE\n",
      "   25 : [H:4][C:3]#[C:2][c:1]1ccccc1                       status ERROR\n",
      "   26 : [H:4][NH+:3]=[CH:2][NH2:1]                         status COMPLETE\n",
      "   27 : [H:2][C:1](=[NH+:3][H:4])N                         status COMPLETE\n",
      "   28 : [H:4][NH:2][CH:3]=[NH2+:1]                         status COMPLETE\n",
      "   29 : [H:3][C:1](=[NH2+])[NH:2][H:4]                     status COMPLETE\n",
      "   30 : [H:4][NH:3]/[CH:2]=[N:1]/[H]                       status COMPLETE\n",
      "   31 : [H:4]/[N:2]=[CH:3]/[NH2:1]                         status COMPLETE\n",
      "   32 : [H:3]/[C:1](=[N:2]\\[H:4])/N                        status COMPLETE\n",
      "   33 : [H:2]/[C:1](=N\\[H])/[NH:3][H:4]                    status COMPLETE\n",
      "   34 : [H:4][NH:3]/[CH:2]=[N:1]\\[H]                       status COMPLETE\n",
      "   35 : [H:4]/[N:2]=[CH:3]\\[NH2:1]                         status COMPLETE\n",
      "   36 : [H:3]/[C:1](=[N:2]/[H:4])/N                        status ERROR\n",
      "   37 : [H:2]/[C:1](=N/[H])/[NH:3][H:4]                    status COMPLETE\n",
      "   38 : C[S@](=[N-])(=O)[NH:4][CH:3]1[CH2:1][CH2:2]1       status COMPLETE\n",
      "   39 : [H:4][C:3]1([CH2:1][CH2:2]1)N[S@@](=[N-])(=O)C     status COMPLETE\n",
      "   40 : [H:4][CH:3]1[CH2:1][CH:2]1N[S@@](=[N-])(=O)C       status COMPLETE\n",
      "   41 : C[S@](=[N-])(=O)[NH:4][CH:3]1[CH2:2][CH2:1]1       status COMPLETE\n",
      "   42 : C[S@:4](=[N-])(=O)[NH:3][CH:2]1[CH2:1]C1           status COMPLETE\n",
      "   43 : C[S@:4](=[N-])(=O)[NH:3][CH:2]1C[CH2:1]1           status COMPLETE\n",
      "   44 : [H:4][N:3]([CH:2]1[CH2:1]C1)[S@@](=[N-])(=O)C      status COMPLETE\n",
      "   45 : [H:4][N:3]([CH:2]1C[CH2:1]1)[S@@](=[N-])(=O)C      status COMPLETE\n",
      "   46 : [CH3:4][S@:3](=[N-])(=O)[NH:2][CH:1]1CC1           status COMPLETE\n",
      "   47 : C[S@:3](=[N-:4])(=O)[NH:2][CH:1]1CC1               status COMPLETE\n",
      "   48 : [H:4][N:3](C1CC1)[S@@:2](=[N-:1])(=O)C             status COMPLETE\n",
      "   49 : C[S@:3](=[N-])(=[O:4])[NH:2][CH:1]1CC1             status COMPLETE\n",
      "   50 : [H:4][N:3](C1CC1)[S@@:2](=[N-])(=O)[CH3:1]         status COMPLETE\n",
      "   51 : [H:4][CH2:3][S@:2](=[N-:1])(=O)NC1CC1              status COMPLETE\n",
      "   52 : [H:4][CH2:3][S@:2](=[N-])(=O)[NH:1]C1CC1           status COMPLETE\n",
      "   53 : [H:4][CH:3]1C[CH:2]1[NH:1][S@@](=[N-])(=O)C        status COMPLETE\n",
      "   54 : [H:3][CH:1]1[CH:2](C1N[S@@](=[N-])(=O)C)[H:4]      status COMPLETE\n",
      "   55 : [H:4][N:3](C1CC1)[S@@:2](=[N-])(=[O:1])C           status COMPLETE\n",
      "   56 : [H:4][C:3]1(CC1)[NH:2][S@@:1](=[N-])(=O)C          status COMPLETE\n",
      "   57 : [H:1][C:2]1(CC1)[N:3]([H:4])[S@@](=[N-])(=O)C      status COMPLETE\n",
      "   58 : C[S@@:4](=N)(=O)[N-:3][CH:2]1[CH2:1]C1             status COMPLETE\n",
      "   59 : C[S@@:4](=N)(=O)[N-:3][CH:2]1C[CH2:1]1             status COMPLETE\n",
      "   60 : [H:4][C:3]1(CC1)[N-:2][S@:1](=N)(=O)C              status COMPLETE\n",
      "   61 : [CH3:4][S@@:3](=N)(=O)[N-:2][CH:1]1CC1             status COMPLETE\n",
      "   62 : C[S@@:3](=[NH:4])(=O)[N-:2][CH:1]1CC1              status COMPLETE\n",
      "   63 : C[S@@:3](=N)(=[O:4])[N-:2][CH:1]1CC1               status COMPLETE\n",
      "   64 : [H:4][N:3]=[S@@:2](=O)([CH3:1])[N-]C1CC1           status COMPLETE\n",
      "   65 : [H:4][N:3]=[S@@:2](=O)(C)[N-:1]C1CC1               status COMPLETE\n",
      "   66 : [H:4][N:3]=[S@@:2](=[O:1])(C)[N-]C1CC1             status COMPLETE\n",
      "   67 : C[S@@:4](=[N-])(=O)[NH:3][CH:2]1[CH2:1]C1          status COMPLETE\n",
      "   68 : C[S@@:4](=[N-])(=O)[NH:3][CH:2]1C[CH2:1]1          status COMPLETE\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ERROR:root:Internal Python error in the inspect module.\n",
      "Below is the traceback from this internal error.\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Traceback (most recent call last):\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/site-packages/IPython/core/interactiveshell.py\", line 3331, in run_code\n",
      "    exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "  File \"<ipython-input-15-8935b0928a4f>\", line 20, in <module>\n",
      "    makePlots(ds, ff, param_fit, ff_analysis, param_analysis, target_directory)\n",
      "  File \"<ipython-input-14-415c033a567c>\", line 24, in makePlots\n",
      "    torsiondrive_data=download_torsiondrive_data(d)\n",
      "  File \"/Users/jessica/Documents/Grad_research/WBO_Torsions_ChayaPaper/release_1.3.0_2/fb-fit/fb-fit0/make_torsion_target_new.py\", line 102, in download_torsiondrive_data\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/site-packages/qcportal/models/torsiondrive.py\", line 346, in get_final_results\n",
      "    results = self.client.custom_query(\"optimization\", \"final_result\", {\"optimization_ids\": opt_ids})\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/site-packages/qcportal/client.py\", line 1256, in custom_query\n",
      "    response = self._automodel_request(addr, \"get\", payload, full_return=True)\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/site-packages/qcportal/client.py\", line 274, in _automodel_request\n",
      "    r = self._request(rest, name, data=payload.serialize(self.encoding), timeout=timeout)\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/site-packages/qcportal/client.py\", line 221, in _request\n",
      "    r = requests.get(addr, **kwargs)\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/site-packages/requests/api.py\", line 76, in get\n",
      "    return request('get', url, params=params, **kwargs)\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/site-packages/requests/api.py\", line 61, in request\n",
      "    return session.request(method=method, url=url, **kwargs)\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/site-packages/requests/sessions.py\", line 530, in request\n",
      "    resp = self.send(prep, **send_kwargs)\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/site-packages/requests/sessions.py\", line 683, in send\n",
      "    r.content\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/site-packages/requests/models.py\", line 829, in content\n",
      "    self._content = b''.join(self.iter_content(CONTENT_CHUNK_SIZE)) or b''\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/site-packages/requests/models.py\", line 751, in generate\n",
      "    for chunk in self.raw.stream(chunk_size, decode_content=True):\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/site-packages/urllib3/response.py\", line 576, in stream\n",
      "    data = self.read(amt=amt, decode_content=decode_content)\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/site-packages/urllib3/response.py\", line 519, in read\n",
      "    data = self._fp.read(amt) if not fp_closed else b\"\"\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/http/client.py\", line 457, in read\n",
      "    n = self.readinto(b)\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/http/client.py\", line 501, in readinto\n",
      "    n = self.fp.readinto(b)\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/socket.py\", line 589, in readinto\n",
      "    return self._sock.recv_into(b)\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/site-packages/urllib3/contrib/pyopenssl.py\", line 313, in recv_into\n",
      "    return self.connection.recv_into(*args, **kwargs)\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/site-packages/OpenSSL/SSL.py\", line 1839, in recv_into\n",
      "    result = _lib.SSL_read(self._ssl, buf, nbytes)\n",
      "KeyboardInterrupt\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/site-packages/IPython/core/interactiveshell.py\", line 2044, in showtraceback\n",
      "    stb = value._render_traceback_()\n",
      "AttributeError: 'KeyboardInterrupt' object has no attribute '_render_traceback_'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/site-packages/IPython/core/ultratb.py\", line 1148, in get_records\n",
      "    return _fixed_getinnerframes(etb, number_of_lines_of_context, tb_offset)\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/site-packages/IPython/core/ultratb.py\", line 316, in wrapped\n",
      "    return f(*args, **kwargs)\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/site-packages/IPython/core/ultratb.py\", line 350, in _fixed_getinnerframes\n",
      "    records = fix_frame_records_filenames(inspect.getinnerframes(etb, context))\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/inspect.py\", line 1502, in getinnerframes\n",
      "    frameinfo = (tb.tb_frame,) + getframeinfo(tb, context)\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/inspect.py\", line 1460, in getframeinfo\n",
      "    filename = getsourcefile(frame) or getfile(frame)\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/inspect.py\", line 696, in getsourcefile\n",
      "    if getattr(getmodule(object, filename), '__loader__', None) is not None:\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/inspect.py\", line 725, in getmodule\n",
      "    file = getabsfile(object, _filename)\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/inspect.py\", line 709, in getabsfile\n",
      "    return os.path.normcase(os.path.abspath(_filename))\n",
      "  File \"/Users/jessica/miniconda3/envs/openff-dev/lib/python3.7/posixpath.py\", line 383, in abspath\n",
      "    cwd = os.getcwd()\n",
      "FileNotFoundError: [Errno 2] No such file or directory\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------\u001b[0m"
     ]
    }
   ],
   "source": [
    "directory = '/Users/jessica/Downloads/release_1.2.0/fb-fit/targets/'\n",
    "ff = '/Users/jessica/Documents/Grad_research/WBO_Torsions_ChayaPaper/release_1.3.0_2/fb-fit/fb-fit0/forcefield/test.offxml'\n",
    "target_directory='/Users/jessica/Documents/Grad_research/WBO_Torsions_ChayaPaper/release_1.3.0_2/fb-fit/fb-fit0'\n",
    "#all of the molecules there is torsions \n",
    "#break them out into subplots for the TIG parameters \n",
    "\n",
    "\n",
    "#Plot for molecules that use TIG5a, but use the TIG-fit0 plots \n",
    "#Plot for TIG3 \n",
    "\n",
    "#run the same experiments with Carbon-Nitrogen central bonds parameters \n",
    "\n",
    "\n",
    "ds=['SMIRNOFF Coverage Torsion Set 1']\n",
    "ff='/Users/jessica/Documents/Grad_research/WBO_Torsions_ChayaPaper/release_1.3.0_2/fb-fit/fb-fit0/forcefield/test.offxml'\n",
    "param_fit=['TIG-fit0'] \n",
    "param_analysis=[]\n",
    "ff_analysis=''\n",
    "\n",
    "makePlots(ds, ff, param_fit, ff_analysis, param_analysis, target_directory)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
